# type: ignore
from xonsh.tools import EnvPath
import requests
import sys
import importlib
from pathlib import Path

def alias(name: str):
    def deco(func):
        def wrapper(argv):
            return func(*argv)
        aliases[name] = wrapper
        return func
    return deco

$VIRTUALENV_HOME = str(p"~/Env")
xontrib load zoxide
xontrib load vox
vox activate py313
clear


$PROMPT = "{INTENSE_GREEN}[{cwd}] {INTENSE_CYAN}({localtime}){RESET}\n"
$MULTILINE_PROMPT = ""
$PNPM_HOME = str(p"~/Env/pnpm")
$PATH.extend([
    "~/Bin",
    "~/Bin/Godot",
    "~/.ghcup/bin",
    "~/.cabal/bin",
    "~/.cargo/bin",
    "~/.elan/bin",
    "~/.local/bin",
    "~/.codon/bin",
    "~/Code/FOSS/zig",
    "~/Code/FOSS/zls/zig-out/bin",
    "~/Code/FOSS/odin",
    "~/Code/FOSS/ols",
    "~/Code/FOSS/aseprite/build/bin",
    "~/Code/FOSS/slang/bin",
    $PNPM_HOME,
])


INCLUDE_PATH = [
    "/usr/local/share/koka/v3.1.2/kklib/include",
    "~/.ghcup/ghc/9.10.1/lib/ghc-9.10.1/lib/x86_64-linux-ghc-9.10.1/rts-1.0.2/include",
    "/usr/include/python3.13",
    "~/.elan/toolchains/stable/include",
]
$C_INCLUDE_PATH = EnvPath(INCLUDE_PATH)
$CPLUS_INCLUDE_PATH = EnvPath(INCLUDE_PATH)
$LD_LIBRARY_PATH = EnvPath([
    "/usr/local/lib",
    "~/.elan/toolchains/stable/lib/lean",
])

$MANPAGER = "sh -c 'col -bx | bat -l man -p'"
$MANROFFOPT = "-c"

aliases.update({
    "py": "python",
    "cls": "clear",
    "dpi": "ciadpi -i 127.0.0.1 -p 10801 -s1 -q1 -f-1 -S -b661 -As",
    "pixelorama": "~/Bin/Pixelorama/Pixelorama.x86_64",
    "ror": "r2modman --no-sandbox",
    "config": "nvim ~/.xonshrc",
    "fucking": "sudo",
})

@alias("c")
def vscode(path: str = '.'):
    z @(path)
    code -r --password-store=gnome-libsecret . &> /dev/null

@alias("n")
def neovim(path: str = '.'):
    z @(path)
    nvim .

@alias("ls")
def list_files(path: str = ".", level: int = 2):
    exa @(path) --icons --long --all --tree --level @(level)


AOC_SESSION: str = p"~/.aoc_session".read_text().strip()
AOC_HEADERS: dict[str, str] = {"Cookie": f"session={AOC_SESSION}"}
@alias("aoc")
def advent_of_code(year: str, day: str, file_path: str):
    response = requests.get(f"https://adventofcode.com/{year}/day/{day}/input", headers = AOC_HEADERS)
    with open(file_path, "w") as file:
        file.write(response.text)

@alias("mod")
def local_module(name: str):
    cwd = str(Path.cwd())
    if cwd not in sys.path:
        print(f"Working directory not in sys.path, appending: {cwd!s}")
        sys.path.append(cwd)
    if name in sys.modules:
        print(f"Module {name!r} exists, reloading")
        del sys.modules[name]
        del globals()[name]
    try:
        mod = importlib.import_module(name)
        sys.modules[name] = mod
        globals()[name] = mod
        print(f"Loaded module {name!r}")
    except ImportError:
        print(f"No module {name!r} found")

VS_HOME: Path = p"/opt/visual-studio-code"
WORKBENCH_CSS: Path = VS_HOME / "resources/app/out/vs/workbench/workbench.desktop.main.css"
USERNAME: str = $(whoami)
EDITS: list[tuple[Path, str]] = [
    (WORKBENCH_CSS, """\
.window-appicon, .window-title {
    display: none;
}"""),
]
@alias("vscustom")
def edit_vscode():
    for file, edit in EDITS:
        if file.owner() != USERNAME:
            print(f"Changing owner of {file}")
            sudo chown -R @(USERNAME) @(file)
        file.open("a").write(edit)
